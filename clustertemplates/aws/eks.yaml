---
{{$uuid := uuidv4}}
apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: "{{.Name}}"
  namespace: "{{.Namespace}}"
spec:
  {{if .Spec.Network}}
  clusterNetwork:
    {{if .Spec.Network.PodsCIDR}}
    pods:
      {{range .Spec.Network.PodsCIDR}}
      cidrBlocks:
        - {{. | quote}}
      {{end}}
    {{end}}
    {{if .Spec.Network.ServicesCIDR}}
    services:
      {{range .Spec.Network.ServicesCIDR}}
      cidrBlocks:
        - {{. | quote}}
      {{end}}
    {{end}}
  {{end}}
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: AWSManagedCluster
    name: "{{.Name}}"
    namespace: "{{.Namespace}}"
  controlPlaneRef:
    kind: AWSManagedControlPlane
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
    name: "{{.Name}}"
    namespace: "{{.Namespace}}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AWSManagedCluster
metadata:
  name: "{{.Name}}"
  namespace: "{{.Namespace}}"
  
{{$bastion := .GetBastion}}
---
kind: AWSManagedControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
metadata:
  name: "{{.Name}}"
  namespace: "{{.Namespace}}"
spec:
  {{if .Spec.ControlPlaneNode.InternalLB}}
  endpointAccess:
    private: true
  {{end}}
  sshKeyName: "{{.Spec.InfrastructureProvider.SSHKey}}"
  region: '{{variable "AWS_REGION"}}'
  version: "{{.Spec.KubernetesVersion}}"
  bastion:
    enabled: {{$bastion.Enabled}}
    disableIngressRules: {{$bastion.DisableIngressRules}}
    instanceType: {{$bastion.InstanceType}}
    allowedCIDRBlocks:
    {{range $bastion.AllowedCIDRBlocks}}
      - {{.}}
    {{end}}
  {{if .Spec.Network}}
  networkSpec:
    vpc:
      id: {{.Spec.Network.VPC}}
    subnets:
    {{range .Spec.Network.Subnets}}
    - id: {{.}}
    {{end}}
  {{end}}

{{$name := .Name}}
{{$namespace := .Namespace}}
{{$k8s := .Spec.KubernetesVersion}}
{{$sshKey := .Spec.InfrastructureProvider.SSHKey}}
{{range $index, $element := .Spec.WorkerNodes}}
---
apiVersion: exp.cluster.x-k8s.io/v1alpha3
kind: MachinePool
metadata:
  name: "{{$name}}-mp-{{$index}}"
  namespace: "{{$namespace}}"
spec:
  clusterName: {{$name}}
  replicas: {{$element.Replicas}}
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: EKSConfig
          name: "{{$name}}-mp-{{$index}}"
          namespace: "{{$namespace}}"
      clusterName: {{$name}}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: AWSManagedMachinePool
        name: "{{$name}}-mp-{{$index}}"
        namespace: "{{$namespace}}"
      version: "{{$k8s}}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AWSManagedMachinePool
metadata:
  name: "{{$name}}-mp-{{$index}}"
  namespace: "{{$namespace}}"
spec:
  eksNodegroupName: "{{$name}}-mp-{{$index}}"
  {{if $element.ProviderTags}}
  additionalTags:
    {{range $key, $value := $element.ProviderTags}}
    {{$key}}: {{$value | quote}}
    {{end}}
  {{end}}
  scaling:
    {{if $element.Autoscale.Enabled}}
    minSize: {{$element.Autoscale.MinSize}}
    maxSize: {{$element.Autoscale.MaxSize}}
    {{else}}
    minSize: {{$element.Replicas}}
    maxSize: {{$element.Replicas}}
  {{end}}
  instanceType: "{{$element.MachineType}}"
  roleName: "nodes.cluster-api-provider-aws.sigs.k8s.io"
  remoteAccess:
    sshKeyName: "{{$sshKey}}"
  {{if $element.Subnet}}
  subnetIDs:
    - {{$element.Subnet}}
  {{end}}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: EKSConfig
metadata:
  name: "{{$name}}-mp-{{$index}}"
  namespace: "{{$namespace}}"
spec:
  KubeletExtraArgs:
    {{$taints := $element.TaintTmpl}}
    {{if $taints}}
    register-with-taints: "{{$taints}}"
    {{end}}
    {{$labels := $element.LabelsTmpl}}
    {{if $labels}}
    node-labels: "{{$labels}}"
    {{end}}
{{end}}