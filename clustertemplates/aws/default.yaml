---
{{$uuid := uuidv4}}
apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: "{{.Name}}"
  namespace: "{{.Namespace}}"
spec:
  {{if .Spec.Network}}
  clusterNetwork:
    {{if .Spec.Network.PodsCIDR}}
    pods:
      {{range .Spec.Network.PodsCIDR}}
      cidrBlocks:
        - {{. | quote}}
      {{end}}
    {{end}}
    {{if .Spec.Network.ServicesCIDR}}
    services:
      {{range .Spec.Network.ServicesCIDR}}
      cidrBlocks:
        - {{. | quote}}
      {{end}}
    {{end}}
  {{end}}
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: AWSCluster
    name: "{{.Name}}"
    namespace: "{{.Namespace}}"
  controlPlaneRef:
    kind: KubeadmControlPlane
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
    name: "{{.Name}}"
    namespace: "{{.Namespace}}"

{{$bastion := .GetBastion}}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AWSCluster
metadata:
  name: "{{.Name}}"
  namespace: "{{.Namespace}}"
spec:
  region: '{{variable "AWS_REGION"}}'
  sshKeyName: "{{.Spec.InfrastructureProvider.SSHKey}}"
  {{if .Spec.ControlPlaneNode.InternalLB}}
  controlPlaneLoadBalancer:
    scheme: internal
  {{end}}
  bastion:
    enabled: {{$bastion.Enabled}}
    disableIngressRules: {{$bastion.DisableIngressRules}}
    instanceType: {{$bastion.InstanceType}}
    allowedCIDRBlocks:
    {{range $bastion.AllowedCIDRBlocks}}
      - {{.}}
    {{end}}
  {{if .Spec.Network}}
  networkSpec:
    vpc:
      id: {{.Spec.Network.VPC}}
    subnets:
    {{range .Spec.Network.Subnets}}
    - id: {{.}}
    {{end}}
  {{end}}
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
metadata:
  name: "{{.Name}}"
  namespace: "{{.Namespace}}"
spec:
  replicas: {{.Spec.ControlPlaneNode.Replicas}}
  infrastructureTemplate:
    kind: AWSMachineTemplate
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    name: "{{.Name}}-{{$uuid}}"
    namespace: "{{.Namespace}}"
  kubeadmConfigSpec:
    initConfiguration:
      nodeRegistration:
        name: {{"'{{ ds.meta_data.local_hostname }}'"}}
        kubeletExtraArgs:
          cloud-provider: aws
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: aws
      controllerManager:
        extraArgs:
          cloud-provider: aws
          {{if .Spec.Network}}
          configure-cloud-routes: 'false'
          {{end}}
    joinConfiguration:
      nodeRegistration:
        name: {{"'{{ ds.meta_data.local_hostname }}'"}}
        kubeletExtraArgs:
          cloud-provider: aws
  version: "{{.Spec.KubernetesVersion}}"
---
kind: AWSMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
metadata:
  name: "{{.Name}}-{{$uuid}}"
  namespace: "{{.Namespace}}"
spec:
  template:
    spec:
      instanceType: "{{.Spec.ControlPlaneNode.MachineType}}"
      iamInstanceProfile: "control-plane.cluster-api-provider-aws.sigs.k8s.io"
      sshKeyName: "{{.Spec.InfrastructureProvider.SSHKey}}"
      {{if .Spec.ControlPlaneNode.Subnet}}
      subnet:
        id: {{.Spec.ControlPlaneNode.Subnet}}
      {{end}}

{{$name := .Name}}
{{$namespace := .Namespace}}
{{$k8s := .Spec.KubernetesVersion}}
{{$sshKey := .Spec.InfrastructureProvider.SSHKey}}
{{range $index, $element := .Spec.WorkerNodes}}
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  name: "{{$name}}-md-{{$index}}"
  namespace: "{{$namespace}}"
spec:
  clusterName: "{{$name}}"
  replicas: {{$element.Replicas}}
  selector:
    matchLabels:
  template:
    spec:
      clusterName: "{{$name}}"
      version: "{{$k8s}}"
      {{if $element.Subnet}}
      subnet:
        id: {{$element.Subnet}}
      {{end}}
      bootstrap:
        configRef:
          name: "{{$name}}-{{$uuid}}-md-{{$index}}"
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
          namespace: "{{$namespace}}"
      infrastructureRef:
        name: "{{$name}}-{{$uuid}}-md-{{$index}}"
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: AWSMachineTemplate
        namespace: "{{$namespace}}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AWSMachineTemplate
metadata:
  name: "{{$name}}-{{$uuid}}-md-{{$index}}"
  namespace: "{{$namespace}}"
spec:
  template:
    spec:
      instanceType: "{{$element.MachineType}}"
      iamInstanceProfile: "nodes.cluster-api-provider-aws.sigs.k8s.io"
      sshKeyName: "{{$sshKey}}"
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfigTemplate
metadata:
  name: "{{$name}}-{{$uuid}}-md-{{$index}}"
  namespace: "{{$namespace}}"
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          name: {{"'{{ ds.meta_data.local_hostname }}'"}}
          kubeletExtraArgs:
            cloud-provider: aws
{{end}}