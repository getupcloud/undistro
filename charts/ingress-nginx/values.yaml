controller:
  name: controller
  image:
    registry: registry.undistro.io/k8s
    image: ingress-nginx/controller
    tag: "v0.46.0"
    digest: sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
    pullPolicy: IfNotPresent
    runAsUser: 101
    allowPrivilegeEscalation: true

  existingPsp: ""

  containerName: controller

  containerPort:
    http: 80
    https: 443

  config: {}

  configAnnotations: {}

  proxySetHeaders: {}

  addHeaders: {}

  dnsConfig: {}

  dnsPolicy: ClusterFirst

  reportNodeInternalIp: false

  hostNetwork: false

  hostPort:
    enabled: false
    ports:
      http: 80
      https: 443

  electionID: ingress-controller-leader

  ingressClass: nginx

  podLabels: {}

  podSecurityContext: {}

  sysctls: {}

  publishService:
    enabled: true
    pathOverride: ""

  scope:
    enabled: false
    namespace: "" # defaults to .Release.Namespace

  configMapNamespace: "" # defaults to .Release.Namespace

  tcp:
    configMapNamespace: "" # defaults to .Release.Namespace
    annotations: {}

  udp:
    configMapNamespace: "" # defaults to .Release.Namespace
    annotations: {}

  maxmindLicenseKey: ""


  extraArgs:
    default-ssl-certificate: "undistro-system/undistro-ingress-cert"

  extraEnvs: []

  kind: Deployment

  annotations: {}

  labels: {}

  updateStrategy: {}

  minReadySeconds: 0

  tolerations: []

  affinity:
    {}

  topologySpreadConstraints:
    []

  terminationGracePeriodSeconds: 300

  nodeSelector:
    kubernetes.io/os: linux

  livenessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

  healthCheckPath: "/healthz"

  podAnnotations: {}

  replicaCount: 1

  minAvailable: 1

  resources:
    requests:
      cpu: 100m
      memory: 90Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50

  autoscalingTemplate: []

  keda:
    apiVersion: "keda.sh/v1alpha1"
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    pollingInterval: 30
    cooldownPeriod: 300
    restoreToOriginalReplicaCount: false
    scaledObject:
      annotations: {}
    triggers: []

    behavior: {}

  enableMimalloc: true

  customTemplate:
    configMapName: ""
    configMapKey: ""

  service:
    enabled: true

    annotations: {}
    labels: {}

    externalIPs: []

    loadBalancerSourceRanges: []

    enableHttp: true
    enableHttps: true
    ports:
      http: 80
      https: 443

    targetPorts:
      http: http
      https: https

    type: LoadBalancer

    nodePorts:
      http: ""
      https: ""
      tcp: {}
      udp: {}

    internal:
      enabled: false
      annotations: {}


      loadBalancerSourceRanges: []


  extraContainers: []

  extraVolumeMounts: []

  extraVolumes: []

  extraInitContainers: []

  admissionWebhooks:
    annotations: {}
    enabled: true
    failurePolicy: Fail
    port: 8443
    certificate: "/usr/local/certificates/cert"
    key: "/usr/local/certificates/key"
    namespaceSelector: {}
    objectSelector: {}

    existingPsp: ""

    service:
      annotations: {}
      externalIPs: []
      loadBalancerSourceRanges: []
      servicePort: 443
      type: ClusterIP

    patch:
      enabled: true
      image:
        registry: registry.undistro.io/dockerhub
        image: jettech/kube-webhook-certgen
        tag: v1.5.1
        pullPolicy: IfNotPresent
      priorityClassName: ""
      podAnnotations: {}
      nodeSelector: {}
      tolerations: []
      runAsUser: 2000

  metrics:
    port: 10254
    enabled: false

    service:
      annotations: {}


      externalIPs: []

      loadBalancerSourceRanges: []
      servicePort: 10254
      type: ClusterIP

    serviceMonitor:
      enabled: false
      additionalLabels: {}
      namespace: ""
      namespaceSelector: {}
      scrapeInterval: 30s
      targetLabels: []
      metricRelabelings: []

    prometheusRule:
      enabled: false
      additionalLabels: {}
      rules:
        []

  lifecycle:
    preStop:
      exec:
        command:
          - /wait-shutdown

  priorityClassName: ""

revisionHistoryLimit: 10

defaultBackend:
  enabled: false

  name: defaultbackend
  image:
    registry: registry.undistro.io/k8s
    image: defaultbackend-amd64
    tag: "1.5"
    pullPolicy: IfNotPresent
    runAsUser: 65534
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false

  existingPsp: ""

  extraArgs: {}

  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
  extraEnvs: []

  port: 8080

  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 0
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5

  tolerations: []

  affinity: {}

  podSecurityContext: {}

  podLabels: {}

  nodeSelector: {}

  podAnnotations: {}

  replicaCount: 1

  minAvailable: 1

  resources: {}

  extraVolumeMounts: []

  extraVolumes: []

  autoscaling:
    annotations: {}
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50

  service:
    annotations: {}


    externalIPs: []

    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP

  priorityClassName: ""

rbac:
  create: true
  scope: false

podSecurityPolicy:
  enabled: false

serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true

imagePullSecrets: []

tcp: {}

udp: {}

dhParam:
